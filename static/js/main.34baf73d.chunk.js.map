{"version":3,"sources":["assets/images/Starlink_Logo.svg","assets/images/satellite.svg","components/Header.js","constants.js","components/SatSetting.js","components/SatelliteList.js","components/WorldMap.js","components/Main.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","starlinkLogo","alt","Component","SAT_BASE_URL","NEARBY_SATELLITE","SATELLITE_POSITION_URL","SatSetting","onChangeLong","value","setState","observerLong","onChangeLat","observerLat","onChangeEle","observerElevation","onChangeAlt","satAlt","Number","onDurationChange","duration","showSatellite","props","onShow","state","isLoading","min","max","defaultValue","style","margin","onChange","this","placeholder","range","step","marks","0","89","size","onClick","SatelliteList","e","target","dataInfo","checked","console","log","selected","list","addOrRemove","item","status","found","some","entry","satid","push","filter","onShowSatMap","onShowMap","isLoad","satList","satInfo","above","disabled","length","tip","itemLayout","dataSource","renderItem","Item","actions","Meta","avatar","satellite","title","satname","description","launchDate","WorldMap","track","data","hasOwnProperty","Error","len","positions","observerData","startTime","context2","map","now","Date","i","timer","setInterval","timePassed","setSeconds","getSeconds","time","getTime","clearRect","font","fillStyle","textAlign","fillText","d3TimeFormat","width","clearInterval","isDrawing","document","getElementsByClassName","innerHTML","forEach","sat","info","drawSat","pos","satlongitude","satlatitude","nameWithNumber","match","join","projection","xy","color","beginPath","arc","Math","PI","fill","generateMap","land","geoKavrayskiy7","scale","translate","height","precision","graticule","geoGraticule","canvas","d3Select","refMap","current","attr","canvas2","refTrack","context","node","getContext","path","geoPath","ele","strokeStyle","globalAlpha","stroke","lineWidth","outline","d3Scale","schemeCategory10","React","createRef","axios","get","then","res","feature","objects","countries","features","catch","message","prevProps","prevState","snapshot","satData","endTime","urls","url","all","spread","args","ref","Main","showMap","preState","showNearbySatellite","setting","isLoadingList","fetchSatellite","response","err","Footer","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.34baf73d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Starlink_Logo.142c8c7f.svg\";","module.exports = __webpack_public_path__ + \"static/media/satellite.07c6d561.svg\";","import React, {Component} from 'react';\r\nimport starlinkLogo  from '../assets/images/Starlink_Logo.svg';\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <img src={starlinkLogo} className=\"App-logo\" alt=\"logo\" />\r\n                <p className=\"title\">\r\n                    StarLink Tracker\r\n                </p>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","export const SAT_BASE_URL = \"https://www.n2yo.com/rest/v1/satellite\";\r\n\r\nexport const SAT_API_KEY = \"4U5QZ4-4DH6BH-8EBRD3-4ID7\";\r\n\r\nexport const STARLINK_CATEGORY = \"52\";\r\n\r\nexport const NEARBY_SATELLITE = `${SAT_BASE_URL}/above`;\r\n\r\nexport const WORLD_MAP_URL = \"https://unpkg.com/world-atlas@1/world/110m.json\";\r\n\r\nexport const SATELLITE_POSITION_URL = `${SAT_BASE_URL}/positions`;","import React, {Component} from 'react';\r\nimport {InputNumber, Button, Slider} from 'antd';\r\n\r\nclass SatSetting extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            observerLat: 0,\r\n            observerLong: 0,\r\n            observerElevation: 0,\r\n            satAlt: 90,\r\n            duration: [0, 90],\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    onChangeLong = (value) => {\r\n        this.setState({\r\n            observerLong: value\r\n        })\r\n    }\r\n\r\n    onChangeLat = (value) => {\r\n        this.setState({\r\n            observerLat: value\r\n        })\r\n    }\r\n\r\n    onChangeEle = (value) => {\r\n        this.setState({\r\n            observerElevation: value\r\n        })\r\n    }\r\n    onChangeAlt = (value) => {\r\n        this.setState({\r\n            satAlt: Number(90 - +value)\r\n        })\r\n    }\r\n\r\n    onDurationChange = (value) => {\r\n        this.setState({\r\n            duration: value\r\n        })\r\n    }\r\n\r\n    showSatellite = () => {\r\n        this.props.onShow(this.state);\r\n    }\r\n\r\n    render() {\r\n        const durationMarkers = { 0: '0', 89: '90'};\r\n        return (\r\n            <div className=\"sat-setting\">\r\n                <div className=\"loc-setting\">\r\n                    <p className=\"setting-label\">From Location</p>\r\n                    <div className=\"setting-list two-item-col\">\r\n                        <div className=\"list-item\">\r\n                            <label>Longitude: </label>\r\n                            <InputNumber\r\n                                min={-180}\r\n                                max={180}\r\n                                defaultValue={0}\r\n                                style={{margin: \"0 2px\"}}\r\n                                onChange={this.onChangeLong}\r\n                            />\r\n                        </div>\r\n\r\n                        <div className=\"list-item right-item\">\r\n                            <label>Latitude: </label>\r\n                            <InputNumber\r\n                                placeholder=\"latitude\"\r\n                                min={-90}\r\n                                max={90}\r\n                                defaultValue={0}\r\n                                style={{margin: \"0 2px\"}}\r\n                                onChange={this.onChangeLat}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"setting-list\">\r\n                        <div className=\"list-item\">\r\n                            <label>Elevation(meters): </label>\r\n                            <InputNumber\r\n                                min={-413}\r\n                                max={8850}\r\n                                defaultValue={0}\r\n                                style={{margin: \"0 2px\"}}\r\n                                onChange={this.onChangeEle}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"altitude-setting\">\r\n                    <p className=\"setting-label\">Restrictions</p>\r\n\r\n                    <div>\r\n                        <span>Show only satellites which are higher than <br /> altitude</span>\r\n                        <InputNumber\r\n                            min={0}\r\n                            max={90}\r\n                            defaultValue={0}\r\n                            style={{margin: \"8px 2px 0\"}}\r\n                            onChange={this.onChangeAlt} /> <span>degrees.</span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"duration-setting\">\r\n                    <p className=\"setting-label\">Duration(sec)</p>\r\n\r\n                    <Slider\r\n                        className=\"duration-slider\"\r\n                        range\r\n                        step={1}\r\n                        defaultValue={[0, 90]}\r\n                        min={0}\r\n                        max={90}\r\n                        marks={durationMarkers}\r\n                        onChange={this.onDurationChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"show-nearby\">\r\n                    <Button\r\n                        className=\"show-nearby-btn\"\r\n                        size=\"large\"\r\n                        onClick={this.showSatellite}\r\n                    >Find Nearby Satellites</Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SatSetting;\r\n","import React, {Component} from 'react';\r\nimport { List, Avatar, Button, Checkbox, Spin } from 'antd';\r\nimport satellite from \"../assets/images/satellite.svg\";\r\n\r\nclass SatelliteList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            selected: [],\r\n            isLoad: false\r\n        };\r\n    }\r\n\r\n    onChange = e => {\r\n        const { dataInfo, checked } = e.target;\r\n        console.log(e.target)\r\n        const { selected } = this.state;\r\n\r\n        const list = this.addOrRemove(dataInfo, checked, selected);\r\n        this.setState({\r\n            selected: list\r\n        })\r\n\r\n    }\r\n\r\n    addOrRemove = (item, status, list) => {\r\n        const found = list.some( entry => entry.satid === item.satid);\r\n        if(status && !found){\r\n            list.push(item)\r\n        }\r\n\r\n        if(!status && found){\r\n            list = list.filter( entry => {\r\n                console.log('entry -> ', entry);\r\n                return entry.satid !== item.satid;\r\n            });\r\n        }\r\n        return list;\r\n    }\r\n\r\n    onShowSatMap = () =>{\r\n        console.log(\"track\");\r\n        this.props.onShowMap(this.state.selected);\r\n    }\r\n\r\n    render() {\r\n        const satList = this.props.satInfo ? this.props.satInfo.above : [];\r\n        const { isLoad } = this.props;\r\n        const { selected } = this.state;\r\n\r\n        return (\r\n            <div className=\"sat-list-box\">\r\n                <Button className=\"sat-list-btn\"\r\n                        size=\"large\"\r\n                        disabled={ selected.length === 0}\r\n                        onClick={this.onShowSatMap}\r\n                >Track on the map</Button>\r\n                <hr/>\r\n\r\n                {\r\n                    isLoad ?\r\n                        <div className=\"spin-box\">\r\n                            <Spin tip=\"Loading...\" size=\"large\" />\r\n                        </div>\r\n                        :\r\n                        <List\r\n                            className=\"sat-list\"\r\n                            itemLayout=\"horizontal\"\r\n                            size=\"small\"\r\n                            dataSource={satList}\r\n                            renderItem={item => (\r\n                                <List.Item\r\n                                    actions={[<Checkbox dataInfo={item} onChange={this.onChange}/>]}\r\n                                >\r\n                                    <List.Item.Meta\r\n                                        avatar={<Avatar size={50} src={satellite} />}\r\n                                        title={<p>{item.satname}</p>}\r\n                                        description={`Launch Date: ${item.launchDate}`}\r\n                                    />\r\n\r\n                                </List.Item>\r\n                            )}\r\n                        />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SatelliteList;\r\n","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport { Spin } from 'antd';\r\nimport { feature } from 'topojson-client';\r\nimport { geoKavrayskiy7 } from 'd3-geo-projection';\r\nimport { geoGraticule, geoPath } from 'd3-geo';\r\nimport { select as d3Select } from 'd3-selection';\r\nimport { schemeCategory10  } from 'd3-scale-chromatic';\r\nimport * as d3Scale from 'd3-scale';\r\nimport { timeFormat as d3TimeFormat } from 'd3-time-format';\r\n\r\nimport { WORLD_MAP_URL, SATELLITE_POSITION_URL, SAT_API_KEY } from '../constants';\r\n\r\nconst width = 960;\r\nconst height = 600;\r\n\r\nclass WorldMap extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { isLoading: false, isDrawing: false };\r\n        this.map = null;\r\n        this.color = d3Scale.scaleOrdinal(schemeCategory10);\r\n        this.refMap = React.createRef();\r\n        this.refTrack = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get(WORLD_MAP_URL)\r\n            .then(res => {\r\n                const { data } = res;\r\n                const land = feature(data, data.objects.countries).features;\r\n                this.generateMap(land);\r\n            })\r\n            .catch( e => {\r\n                console.log('err in fetch map data ', e.message);\r\n            })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if(prevProps.satData !== this.props.satData) {\r\n            const { observerLat, observerLong, duration, observerElevation } = this.props.observerData;\r\n            const endTime = duration[1] * 60;\r\n            this.setState({ isLoading: true });\r\n            const urls = this.props.satData.map( sat => {\r\n                const { satid } = sat;\r\n                const url = `${SATELLITE_POSITION_URL}/${satid}/${observerLat}/${observerLong}/${observerElevation}/${endTime}/&apiKey=${SAT_API_KEY}`;\r\n                return axios.get(url);\r\n            });\r\n\r\n            axios.all(urls)\r\n                .then(\r\n                    axios.spread((...args) => {\r\n                        return args.map(item => item.data);\r\n                    })\r\n                )\r\n                .then( res => {\r\n                    this.setState({\r\n                        isLoading: false,\r\n                        isDrawing: true\r\n                    });\r\n\r\n                    if(!prevState.isDrawing) {\r\n                        this.track(res);\r\n                    }else{\r\n                        const oHint = document.getElementsByClassName('hint')[0];\r\n                        oHint.innerHTML = 'Please wait for these satellite animation to finish before selection new ones!'\r\n                    }\r\n                })\r\n                .catch( e => {\r\n                    console.log('err in fetch satellite position -> ', e.message);\r\n                })\r\n        }\r\n    }\r\n\r\n    track = (data) => {\r\n        if(!data[0].hasOwnProperty('positions')){\r\n            throw new Error('no position data');\r\n            return;\r\n        };\r\n        const len = data[0].positions.length;\r\n        const { duration: [startTime, endTime] } = this.props.observerData;\r\n        const { context2 } = this.map;\r\n\r\n        let now = new Date();\r\n        let i = startTime;\r\n\r\n        let timer = setInterval( () => {\r\n            let timePassed = Date.now() - now;\r\n            if(i === startTime) {\r\n                now.setSeconds(now.getSeconds() + startTime * 60)\r\n            }\r\n\r\n            let time = new Date(now.getTime() + 60 * timePassed);\r\n            context2.clearRect(0, 0, width, height);\r\n            context2.font = \"bold 14px sans-serif\";\r\n            context2.fillStyle = \"#333\";\r\n            context2.textAlign = \"center\";\r\n            context2.fillText(d3TimeFormat(time), width / 2, 10);\r\n\r\n            if(i >= len) {\r\n                clearInterval(timer);\r\n                this.setState({isDrawing: false});\r\n                const oHint = document.getElementsByClassName('hint')[0];\r\n                oHint.innerHTML = ''\r\n                return;\r\n            }\r\n            data.forEach( sat => {\r\n                const { info, positions } = sat;\r\n                this.drawSat(info, positions[i])\r\n            });\r\n\r\n            i += 60;\r\n        }, 1000)\r\n    }\r\n\r\n    drawSat = (sat, pos) => {\r\n        const { satlongitude, satlatitude } = pos;\r\n        if(!satlongitude || !satlatitude ) return;\r\n        const { satname } = sat;\r\n        const nameWithNumber = satname.match(/\\d+/g).join('');\r\n        const { projection, context2 } = this.map;\r\n        const xy = projection([satlongitude, satlatitude]);\r\n        context2.fillStyle = this.color(nameWithNumber);\r\n        context2.beginPath();\r\n        context2.arc(xy[0], xy[1], 4, 0, 2*Math.PI);\r\n        context2.fill();\r\n        context2.font = \"bold 11px sans-serif\";\r\n        context2.textAlign = \"center\";\r\n        context2.fillText(nameWithNumber, xy[0], xy[1]+14);\r\n    }\r\n\r\n    render() {\r\n        const { isLoading } = this.state;\r\n        return (\r\n            <div className=\"map-box\">\r\n                {\r\n                    isLoading ?\r\n                        <div className=\"spinner\">\r\n                            <Spin tip=\"Loading...\" size=\"large\"/>\r\n                        </div> : null\r\n                }\r\n                <canvas className=\"map\" ref={this.refMap}/>\r\n                <canvas className=\"track\" ref={this.refTrack}/>\r\n                <div className=\"hint\"></div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    generateMap = land => {\r\n        const projection = geoKavrayskiy7()\r\n            .scale(170)\r\n            .translate([width / 2, height / 2])\r\n            .precision(.1);\r\n\r\n        const graticule = geoGraticule();\r\n        const canvas = d3Select(this.refMap.current)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n\r\n        const canvas2 = d3Select(this.refTrack.current)\r\n            .attr(\"width\", width)\r\n            .attr(\"height\", height);\r\n\r\n        const context = canvas.node().getContext(\"2d\");\r\n        const context2 = canvas2.node().getContext(\"2d\");\r\n\r\n        let path = geoPath()\r\n            .projection(projection)\r\n            .context(context);\r\n\r\n        land.forEach( ele => {\r\n            context.fillStyle = '#B3DDEF';\r\n            context.strokeStyle = '#000';\r\n            context.globalAlpha = 0.7;\r\n            context.beginPath();\r\n            path(ele);\r\n            context.fill();\r\n            context.stroke();\r\n\r\n            context.strokeStyle = 'rgba(220, 220, 220, 0.1)';\r\n            context.beginPath();\r\n            path(graticule());\r\n            context.lineWidth = 0.1;\r\n            context.stroke();\r\n\r\n            context.beginPath();\r\n            context.lineWidth = 0.5;\r\n            path(graticule.outline());\r\n            context.stroke();\r\n        })\r\n\r\n        this.map = {\r\n            projection: projection,\r\n            graticule: graticule,\r\n            context: context,\r\n            context2: context2\r\n        }\r\n    }\r\n}\r\n\r\nexport default WorldMap;\r\n","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport { NEARBY_SATELLITE, SAT_API_KEY, STARLINK_CATEGORY } from '../constants';\r\nimport SatSetting from './SatSetting';\r\nimport SatelliteList from './SatelliteList';\r\nimport WorldMap from './WorldMap';\r\n\r\nclass Main extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            satInfo: null,\r\n            satList: null,\r\n            setting: null,\r\n            isLoadingList: false\r\n        }\r\n    }\r\n    render() {\r\n        const { isLoadingList, satInfo, satList, setting } = this.state;\r\n        return (\r\n            <div className=\"main\">\r\n                <div className=\"left-side\">\r\n                    <SatSetting onShow={this.showNearbySatellite}/>\r\n                    <SatelliteList isLoad={isLoadingList}\r\n                                   satInfo={satInfo}\r\n                                   onShowMap={this.showMap} />\r\n                </div>\r\n                <div className=\"right-side\">\r\n                    <WorldMap satData={satList} observerData={setting} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    showMap = (selected) => {\r\n        this.setState(preState => ({\r\n            ...preState,\r\n            satList: [...selected]\r\n        }))\r\n    }\r\n\r\n    showNearbySatellite = (setting) => {\r\n        this.setState({\r\n            isLoadingList: true,\r\n            setting: setting\r\n        })\r\n        this.fetchSatellite(setting);\r\n    }\r\n\r\n    fetchSatellite = (setting) => {\r\n        const { observerLat, observerLong, observerElevation, satAlt } = setting;\r\n        const url = `${NEARBY_SATELLITE}/${observerLat}/${observerLong}/${observerElevation}/${satAlt}/${STARLINK_CATEGORY}&apiKey=${SAT_API_KEY}`;\r\n        axios.get(url)\r\n            .then(response => {\r\n                this.setState({\r\n                    satInfo: response.data,\r\n                    isLoadingList: false\r\n                })\r\n            })\r\n            .catch(err => {\r\n                console.log('fetch satellite failed -> ', err.message);\r\n            })\r\n    }\r\n}\r\nexport default Main;\r\n","import React, {Component} from 'react';\r\n\r\nclass Footer extends Component {\r\n    render() {\r\n        return (\r\n            <footer className=\"footer\">\r\n                ©2020 StarLink Tracker. All Rights Reserved. Website Made by Hengyi\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}